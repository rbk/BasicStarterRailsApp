rails g migration AddEmailToSession email:string
rails g migration AddGroupToSession group:string



on submit to session new
	- check database for user and password
	- if success, set session[:user_id] as a cookie
	- add user to session table
	- set session[:group]

	if logged in already
		- do nothing

	application wide authentication
		- always check for proper session cookie stored on device

ADD TO USER MODEL = login_count:integer 

Log Model !!!
	- Log in count
		- first login change password
	- Log user logins and atttempts
		- time, success/failure, ip address, email
		- after three failures, offer to reset password

# Generate Access Log Model
rails g model AccessLog outcome:string email:string ip_address:string http_user_agent:string


# Add login count to Users
rails g migration AddLoginCountToUsers login_count:integer


# Posts model and controller
	- title
	- content
	- author
	- date published
	- status
	- categories
	- tags(for tag cloud)
	- comments
	- bookmarks (button that saves bookmark and increments counter in db)
	- star rating
	- approx read time ( how to calculate? )

rails g model Post title:string content:text rating:integer read_time:string status:string user:references
rails g migration AddSlugToPosts slug:string
rails g controller posts index show create update destroy


rails g model Category name:string
rails g controller categories 

users have one account
	- Account Model
		- ?
users have many blog posts


# Brainstorm ( or at least a sprinkle..)

- Blog: with markdown editor, uploads, themes(would be really cool, thinking multi user)
- Embeddable forms: Integrate SSL, Iframe, Donator is big deal for GuRuStu!!!, form creator important, Paypal/Stripe, Email notifications
- Shareaplan.com: Social media just for teachers! Alternative to GoogleDocs File sharing, twitter like feeds, lesson collaboration, chat, free accounts, Amazon EC2 for sure.
- A personal blog





# Other notes
	I just whipped up a nice light rails application with custom authentication. Now for the idea, the thing that makes a difference, changes the world. What could it be? I taken great pleasure in create this base up to this point. There is something to be learned here. I think my brain is fried from last night.

	Even though I can display any data from the database here, I still need to build the models and the endpoints for creating and updating things associated with this users account.

	This is cool because you can get any information you need from this page from the pages controller.


# Launch Checklist/Client Log

## Models

- Sites		
		* has_many tasks
		* has_one checklist

		server_name:string
		server_location:string
		ip:string
		repository:string
		domain:string
		dns:string
		email:string
		notes:text
		checklist_complete:boolean
		deployed:boolean

rails g scaffold Site server_name server_location ip repository domain dns email notes:text checklist_complete:boolean deployed:boolean

- Task
		belongs_to site		
		
		name
		responsible
		due:timestamp
		completed:boolean
		date_completed:timestamp
		site:references

rails g model Task name responsible due:timestamp date_completed:timestamp completed:boolean
rails g controller

- Checklist
		belongs_to site

		analytics:boolean
		permalinks:boolean
		contact_forms:boolean
		site_url:boolean
		allow_robots:boolean
		css_compressed:boolean
		javascript_compressed:boolean
		redirects:boolean
		google_site_map:boolean
		site:references

		rails g scaffold Checklist analytics:boolean permalinks:boolean contact_forms:boolean site_url:boolean allow_robots:boolean css_compressed:boolean javascript_compressed:boolean redirects:boolean google_site_map:boolean site:references

		 

Deploy List
	- need to add to this at any time
	- entire list belongs to any site
## Checklist

- Google Analytics installed
- Refresh Peramlinks ( WP )
- Contact Forms Ready
- Site Url correct
- Allow Robots
- Sass Compressed
- Javascript compressed
- 301 Redirects in place
- Site map submited to Google

DeployList

How to set a default checklist?
	- model specific to list
	- add questions to checklist
	- each site has checklist
	- set checklist to default on view, update with question params....would overwrite..
How to update checklist globally?
	- when site is viewed, checklist is synced with default checklist

## Features

- Searchable/Sortable list of sites
* Uptime checker
		ping check ruby
* Page speed check?
** Tabs: Notes, Checklist, Tasks, Details
*** Lock site from editing when someone else is editing

		# time way
		1. user clicks edit
		2. save current editing time
		3. if someone else trys to edit, check to see is updated_last == editing_time
		4. if not equal, denied access
		5. on user save, set editing_time == updated_last

		# simplest way
		1. on edit, set editing to true
		2. on save, set editing to false
		3. don't allow access to model with editing true




